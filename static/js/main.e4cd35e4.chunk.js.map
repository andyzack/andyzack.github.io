{"version":3,"sources":["assets/images/logo.png","error-boundary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","fallback","children","React","Component","defaultProps","TopNav","lazy","Footer","Home","About","Gallery","Resume","Cars","App","className","to","src","logo","alt","Suspense","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,4MCGtBC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,GAFR,E,+EAaDC,EAAOC,GACvBC,QAAQC,IAAIH,EAAOC,K,+BAInB,OAAIG,KAAKN,MAAMC,SACNK,KAAKP,MAAMQ,SAGbD,KAAKP,MAAMS,Y,gDAbYN,GAC9B,MAAO,CAAED,UAAU,O,GAXoBQ,IAAMC,WAA5BZ,EAMZa,aAAe,CACpBJ,SAAU,sD,UCFRK,EAASH,IAAMI,MAAK,kBAAM,iCAC1BC,EAASL,IAAMI,MAAK,kBAAM,iCAE1BE,EAAON,IAAMI,MAAK,kBAAM,gEACxBG,EAAQP,IAAMI,MAAK,kBAAM,uDACzBI,EAAUR,IAAMI,MAAK,kBAAM,iCAC3BK,EAAST,IAAMI,MAAK,kBAAM,uDAC1BM,EAAOV,IAAMI,MAAK,kBAAM,gEAkEfO,MAhEf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,6CACb,yBAAKA,UAAU,+BACb,4BAAQA,UAAU,eAChB,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CAAMA,UAAU,gCAAgCC,GAAG,KACjD,yBACEC,IAAKC,IACLH,UAAU,mBACVI,IAAI,UAIV,yBAAKJ,UAAU,2BACf,kBAAC,EAAD,CAAed,SAAU,wBACvB,kBAAC,IAAMmB,SAAP,CAAgBnB,SAAS,mBACvB,kBAACK,EAAD,WAMR,yBAAKS,UAAU,eACb,kBAAC,EAAD,CAAed,SAAU,2BACvB,kBAAC,IAAMmB,SAAP,CAAgBnB,SAAS,sBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,OAAO,EAAMC,KAAK,KACvB,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,SACV,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,UACV,kBAACZ,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAK,YACV,kBAACX,EAAD,OAEF,kBAAC,IAAD,CAAOW,KAAK,WACV,kBAACV,EAAD,OAEF,kBAAC,IAAD,CAAOU,KAAK,SACV,kBAACT,EAAD,aAQd,kBAAC,EAAD,CAAeZ,SAAU,0BACvB,kBAAC,IAAMmB,SAAP,CAAgBnB,SAAS,qBACvB,kBAACO,EAAD,WC7DQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e4cd35e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.281e5f7b.png\";","import React from \"react\";\n\n// https://reactjs.org/docs/error-boundaries.html\nexport default class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static defaultProps = {\n    fallback: <h1>Something went wrong.</h1>\n  };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport logo from './assets/images/logo.png';\n\nimport ErrorBoundary from \"./error-boundary\";\n\nimport './assets/sass/App.scss';\n\nconst TopNav = React.lazy(() => import('./modules/TopNav'));\nconst Footer = React.lazy(() => import('./modules/Footer'));\n\nconst Home = React.lazy(() => import('./modules/Home'));\nconst About = React.lazy(() => import('./modules/About'));\nconst Gallery = React.lazy(() => import('./modules/Gallery'));\nconst Resume = React.lazy(() => import('./modules/Resume'));\nconst Cars = React.lazy(() => import('./modules/Cars'));\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"cover bg-left bg-center-l aaz-banner-main\">\n          <div className=\"bg-black-80 pb3 pb4-m pb5-l\">\n            <header className=\"bg-white-10\">\n              <div className=\"dt w-100 mw8 center relative z-999\">\n                <div className=\"dtc w2 v-mid ph3-ns ph1 pv1\">\n                  <Link className=\"dib pa1 grow-large border-box\" to=\"/\">\n                    <img\n                      src={logo}\n                      className=\"w3-ns w2 mw-none\"\n                      alt=\"AAZ\"\n                    />\n                  </Link>\n                </div>\n                <div className=\"dtc v-mid tr pa3-ns pa1\">\n                <ErrorBoundary fallback={\"Couldn't catch menu!\"}>\n                  <React.Suspense fallback=\"loading menu...\">\n                    <TopNav />\n                  </React.Suspense>\n                </ErrorBoundary>\n                </div>\n              </div>\n            </header>\n            <div className=\"App-content\">\n              <ErrorBoundary fallback={\"Couldn't catch modules!\"}>\n                <React.Suspense fallback=\"loading modules...\">\n                  <Switch>\n                    <Route exact={true} path=\"/\">\n                      <Home />\n                    </Route>\n                    <Route path=\"/home\">\n                      <Home />\n                    </Route>\n                    <Route path=\"/about\">\n                      <About />\n                    </Route>\n                    <Route path=\"/gallery\">\n                      <Gallery />\n                    </Route>\n                    <Route path=\"/resume\">\n                      <Resume />\n                    </Route>\n                    <Route path=\"/cars\">\n                      <Cars />\n                    </Route>\n                  </Switch>\n                </React.Suspense>\n              </ErrorBoundary>\n            </div>\n          </div>\n        </div>\n        <ErrorBoundary fallback={\"Couldn't catch footer!\"}>\n          <React.Suspense fallback=\"loading footer...\">\n            <Footer />\n          </React.Suspense>\n        </ErrorBoundary>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}